// Code generated by protoc-gen-go.
// source: testdata/echo_service.proto
// DO NOT EDIT!

/*
Package testdata is a generated protocol buffer package.

It is generated from these files:
	testdata/echo_service.proto
	testdata/everything.proto

It has these top-level messages:
	EchoMessage
	SimpleMessage
	NumberMessage
	NestedMessage
	EnumMessage
	OneofMessage
	MapMessage
*/
package testdata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoMessage struct {
	Value     string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	ErrorCode uint32 `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *EchoMessage) Reset()                    { *m = EchoMessage{} }
func (m *EchoMessage) String() string            { return proto.CompactTextString(m) }
func (*EchoMessage) ProtoMessage()               {}
func (*EchoMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EchoMessage) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*EchoMessage)(nil), "grpcurl.test.EchoMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Echo service

type EchoClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
	ClientStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (Echo_ClientStreamingEchoClient, error)
	ServerStreamingEcho(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (Echo_ServerStreamingEchoClient, error)
	BidiStreamingBulkEcho(ctx context.Context, opts ...grpc.CallOption) (Echo_BidiStreamingBulkEchoClient, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := grpc.Invoke(ctx, "/grpcurl.test.Echo/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) ClientStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (Echo_ClientStreamingEchoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Echo_serviceDesc.Streams[0], c.cc, "/grpcurl.test.Echo/ClientStreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoClientStreamingEchoClient{stream}
	return x, nil
}

type Echo_ClientStreamingEchoClient interface {
	Send(*EchoMessage) error
	CloseAndRecv() (*EchoMessage, error)
	grpc.ClientStream
}

type echoClientStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *echoClientStreamingEchoClient) Send(m *EchoMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoClientStreamingEchoClient) CloseAndRecv() (*EchoMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoClient) ServerStreamingEcho(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (Echo_ServerStreamingEchoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Echo_serviceDesc.Streams[1], c.cc, "/grpcurl.test.Echo/ServerStreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServerStreamingEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Echo_ServerStreamingEchoClient interface {
	Recv() (*EchoMessage, error)
	grpc.ClientStream
}

type echoServerStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *echoServerStreamingEchoClient) Recv() (*EchoMessage, error) {
	m := new(EchoMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoClient) BidiStreamingBulkEcho(ctx context.Context, opts ...grpc.CallOption) (Echo_BidiStreamingBulkEchoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Echo_serviceDesc.Streams[2], c.cc, "/grpcurl.test.Echo/BidiStreamingBulkEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoBidiStreamingBulkEchoClient{stream}
	return x, nil
}

type Echo_BidiStreamingBulkEchoClient interface {
	Send(*EchoMessage) error
	Recv() (*EchoMessage, error)
	grpc.ClientStream
}

type echoBidiStreamingBulkEchoClient struct {
	grpc.ClientStream
}

func (x *echoBidiStreamingBulkEchoClient) Send(m *EchoMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoBidiStreamingBulkEchoClient) Recv() (*EchoMessage, error) {
	m := new(EchoMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Echo service

type EchoServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	ClientStreamingEcho(Echo_ClientStreamingEchoServer) error
	ServerStreamingEcho(*EchoMessage, Echo_ServerStreamingEchoServer) error
	BidiStreamingBulkEcho(Echo_BidiStreamingBulkEchoServer) error
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcurl.test.Echo/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_ClientStreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServer).ClientStreamingEcho(&echoClientStreamingEchoServer{stream})
}

type Echo_ClientStreamingEchoServer interface {
	SendAndClose(*EchoMessage) error
	Recv() (*EchoMessage, error)
	grpc.ServerStream
}

type echoClientStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *echoClientStreamingEchoServer) SendAndClose(m *EchoMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoClientStreamingEchoServer) Recv() (*EchoMessage, error) {
	m := new(EchoMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Echo_ServerStreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServer).ServerStreamingEcho(m, &echoServerStreamingEchoServer{stream})
}

type Echo_ServerStreamingEchoServer interface {
	Send(*EchoMessage) error
	grpc.ServerStream
}

type echoServerStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *echoServerStreamingEchoServer) Send(m *EchoMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Echo_BidiStreamingBulkEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServer).BidiStreamingBulkEcho(&echoBidiStreamingBulkEchoServer{stream})
}

type Echo_BidiStreamingBulkEchoServer interface {
	Send(*EchoMessage) error
	Recv() (*EchoMessage, error)
	grpc.ServerStream
}

type echoBidiStreamingBulkEchoServer struct {
	grpc.ServerStream
}

func (x *echoBidiStreamingBulkEchoServer) Send(m *EchoMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoBidiStreamingBulkEchoServer) Recv() (*EchoMessage, error) {
	m := new(EchoMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcurl.test.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echo_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamingEcho",
			Handler:       _Echo_ClientStreamingEcho_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamingEcho",
			Handler:       _Echo_ServerStreamingEcho_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStreamingBulkEcho",
			Handler:       _Echo_BidiStreamingBulkEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "testdata/echo_service.proto",
}

func init() { proto.RegisterFile("testdata/echo_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xbf, 0x4b, 0x03, 0x31,
	0x14, 0xc7, 0x4d, 0x51, 0xa1, 0x4f, 0x5d, 0xa2, 0x42, 0x55, 0x84, 0xd2, 0xe9, 0xa6, 0xa4, 0xea,
	0x28, 0x38, 0x5c, 0x71, 0x14, 0xa1, 0xb7, 0xb9, 0x94, 0x34, 0xf7, 0xc8, 0x85, 0xa6, 0x7d, 0xe5,
	0x25, 0xb9, 0xc1, 0xff, 0xcd, 0xff, 0x4d, 0xae, 0xb6, 0xd2, 0xc5, 0xa9, 0x4e, 0xef, 0xf7, 0xe7,
	0xfb, 0xe0, 0x0b, 0x77, 0x09, 0x63, 0xaa, 0x4d, 0x32, 0x1a, 0x6d, 0x43, 0xb3, 0x88, 0xdc, 0x7a,
	0x8b, 0x6a, 0xcd, 0x94, 0x48, 0x9e, 0x3b, 0x5e, 0xdb, 0xcc, 0x41, 0x75, 0x4b, 0xa3, 0x12, 0xce,
	0x5e, 0x6d, 0x43, 0x6f, 0x18, 0xa3, 0x71, 0x28, 0xaf, 0xe0, 0xa4, 0x35, 0x21, 0xe3, 0x40, 0x0c,
	0x45, 0xd1, 0x9f, 0xfe, 0x14, 0xf2, 0x1e, 0x00, 0x99, 0x89, 0x67, 0x96, 0x6a, 0x1c, 0xf4, 0x86,
	0xa2, 0xb8, 0x98, 0xf6, 0x37, 0x9d, 0x09, 0xd5, 0xf8, 0xf8, 0xd5, 0x83, 0xe3, 0x0e, 0x22, 0x5f,
	0xb6, 0xf1, 0x46, 0xed, 0x6b, 0xa8, 0x3d, 0x81, 0xdb, 0xbf, 0x47, 0xa3, 0x23, 0xf9, 0x0e, 0x97,
	0x93, 0xe0, 0x71, 0x95, 0xaa, 0xc4, 0x68, 0x96, 0x7e, 0xe5, 0x0e, 0xc1, 0x15, 0xa2, 0x03, 0x56,
	0xc8, 0x2d, 0xf2, 0xbf, 0x00, 0xc7, 0x42, 0x56, 0x70, 0x5d, 0xfa, 0xda, 0xff, 0xe2, 0xca, 0x1c,
	0x16, 0x87, 0xfd, 0x38, 0x16, 0xe5, 0xc3, 0x87, 0x76, 0x3e, 0x35, 0x79, 0xae, 0x2c, 0x2d, 0xf5,
	0xc2, 0x7c, 0xa2, 0xcb, 0x31, 0xb3, 0xd7, 0xdb, 0x3b, 0xbd, 0xb3, 0xf3, 0x79, 0x97, 0xcc, 0x4f,
	0x37, 0x5e, 0x3e, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xb9, 0xae, 0x96, 0xea, 0x01, 0x00,
	0x00,
}
